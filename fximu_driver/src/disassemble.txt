snippet1:

          // 1. Normalize the Quaternion (CRITICAL!)
          geometry_msgs::msg::Quaternion q = imu_data.orientation;
          float magnitude = std::sqrt(q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z);
          if(magnitude == 0.0f) {
            RCLCPP_WARN(this->get_logger(), "Invalid quaternion (zero magnitude). Skipping.");
            return;
          }

          q.w /= magnitude;
          q.x /= magnitude;
          q.y /= magnitude;
          q.z /= magnitude;

          // create a magnetic field vector from mag_data
          geometry_msgs::msg::Vector3 mag_vector;
          mag_vector.x = mag_data.magnetic_field.x;
          mag_vector.y = mag_data.magnetic_field.y;
          mag_vector.z = mag_data.magnetic_field.z;

          // rotate the vector
          geometry_msgs::msg::Vector3 rotated_mag = rotate_vector(mag_vector, q);

          // update the original mag_data
          mag_data.magnetic_field.x = rotated_mag.x;
          mag_data.magnetic_field.y = rotated_mag.y;
          mag_data.magnetic_field.z = rotated_mag.z;

          //float mag_vector_len = sqrt((mag_data.magnetic_field.x * mag_data.magnetic_field.x) + (mag_data.magnetic_field.y * mag_data.magnetic_field.y) + (mag_data.magnetic_field.z * mag_data.magnetic_field.z)); 
          //RCLCPP_INFO(get_logger(), "%f",
          //  mag_vector
          //);

    geometry_msgs::msg::Vector3 FximuNode::rotate_vector(const geometry_msgs::msg::Vector3& v, const geometry_msgs::msg::Quaternion& q)
    {
      geometry_msgs::msg::Quaternion v_quat;
      v_quat.w = 0.0f;
      v_quat.x = v.x;
      v_quat.y = v.y;
      v_quat.z = v.z;

      geometry_msgs::msg::Quaternion q_conjugate;
      q_conjugate.w = q.w;
      q_conjugate.x = -q.x;
      q_conjugate.y = -q.y;
      q_conjugate.z = -q.z;

      geometry_msgs::msg::Quaternion rotated_quat = quaternion_multiply(quaternion_multiply(q, v_quat), q_conjugate);

      geometry_msgs::msg::Vector3 rotated_v;
      rotated_v.x = rotated_quat.x;
      rotated_v.y = rotated_quat.y;
      rotated_v.z = rotated_quat.z;

      return rotated_v;
    }

    geometry_msgs::msg::Quaternion FximuNode::quaternion_multiply(const geometry_msgs::msg::Quaternion& q1, const geometry_msgs::msg::Quaternion& q2)
    {
      geometry_msgs::msg::Quaternion result;
      result.w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
      result.x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y;
      result.y = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
      result.z = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
      return result;
    }